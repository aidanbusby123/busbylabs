{"ast":null,"code":"import React,{useRef,useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const canvasRef=useRef(null);const[prediction,setPrediction]=useState(null);const[probabilities,setProbabilities]=useState([]);// Store probabilities for each digit\nconst gridSize=28;// The grid is 28x28\nconst canvasSize=560;// The canvas is 560x560\nconst blockSize=canvasSize/gridSize;// Size of each block in the grid\nlet isDrawing=false;// Track whether the user is drawing\n// Function to clear the canvas\nconst clearCanvas=()=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');ctx.fillStyle='white';// Set the canvas background to white\nctx.fillRect(0,0,canvas.width,canvas.height);// Fill the canvas with white\n};// Clear the canvas on initial load\nuseEffect(()=>{clearCanvas();// Prevent touch scrolling on the canvas\nconst canvas=canvasRef.current;const preventTouchScroll=e=>{e.preventDefault();};canvas.addEventListener('touchmove',preventTouchScroll,{passive:false});canvas.addEventListener('touchstart',preventTouchScroll,{passive:false});return()=>{canvas.removeEventListener('touchmove',preventTouchScroll);canvas.removeEventListener('touchstart',preventTouchScroll);};},[]);// Function to send the canvas data to the backend\nconst predictDigit=async()=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');// Get the image data from the canvas\nconst imageData=ctx.getImageData(0,0,canvas.width,canvas.height);const grayscaleData=[];// Convert the canvas data to grayscale and normalize\nfor(let i=0;i<imageData.data.length;i+=4){const grayscale=(imageData.data[i]+imageData.data[i+1]+imageData.data[i+2])/3;const normalized=1-grayscale/255;// Invert so 0 is white and 1 is black\ngrayscaleData.push(normalized);}const resizedData=[];const scale=canvas.width/gridSize;for(let y=0;y<gridSize;y++){for(let x=0;x<gridSize;x++){const startX=Math.floor(x*scale);const startY=Math.floor(y*scale);const endX=Math.floor((x+1)*scale);const endY=Math.floor((y+1)*scale);let sum=0;let count=0;for(let yy=startY;yy<endY;yy++){for(let xx=startX;xx<endX;xx++){const pixelIndex=yy*canvas.width+xx;sum+=grayscaleData[pixelIndex];count++;}}resizedData.push(sum/count);}}try{const response=await axios.post('https://busbylabs.com/projects/MNISTneuralnet/predict',{image:resizedData});console.log(\"Backend Response:\",response.data);// Debugging\nsetPrediction(response.data.digit);setProbabilities(response.data.probabilities||[]);// Handle missing probabilities\n}catch(error){console.error('Error predicting digit:',error);}};// Function to start drawing\nconst startDrawing=(x,y)=>{isDrawing=true;drawBlock(x,y);// Start drawing immediately\n};// Function to draw a block on the canvas\nconst drawBlock=(x,y)=>{if(!isDrawing)return;const canvas=canvasRef.current;const ctx=canvas.getContext('2d');// Calculate the grid cell (block) based on the current position\nconst gridX=Math.floor(x/blockSize)*blockSize;const gridY=Math.floor(y/blockSize)*blockSize;// Draw a filled rectangle (block) at the grid cell\nctx.fillStyle='black';ctx.fillRect(gridX,gridY,blockSize,blockSize);};// Function to stop drawing\nconst stopDrawing=()=>{isDrawing=false;};// Function to handle mouse events\nconst handleMouseDown=e=>{const rect=canvasRef.current.getBoundingClientRect();const scaleX=canvasRef.current.width/rect.width;// Account for scaling\nconst scaleY=canvasRef.current.height/rect.height;// Account for scaling\nconst x=(e.clientX-rect.left)*scaleX;const y=(e.clientY-rect.top)*scaleY;startDrawing(x,y);};const handleMouseMove=e=>{const rect=canvasRef.current.getBoundingClientRect();const scaleX=canvasRef.current.width/rect.width;// Account for scaling\nconst scaleY=canvasRef.current.height/rect.height;// Account for scaling\nconst x=(e.clientX-rect.left)*scaleX;const y=(e.clientY-rect.top)*scaleY;drawBlock(x,y);};const handleMouseUp=()=>{stopDrawing();};// Function to handle touch events\nconst handleTouchStart=e=>{e.preventDefault();const rect=canvasRef.current.getBoundingClientRect();const scaleX=canvasRef.current.width/rect.width;// Account for scaling\nconst scaleY=canvasRef.current.height/rect.height;// Account for scaling\nconst touch=e.touches[0];const x=(touch.clientX-rect.left)*scaleX;const y=(touch.clientY-rect.top)*scaleY;startDrawing(x,y);};const handleTouchMove=e=>{e.preventDefault();const rect=canvasRef.current.getBoundingClientRect();const scaleX=canvasRef.current.width/rect.width;// Account for scaling\nconst scaleY=canvasRef.current.height/rect.height;// Account for scaling\nconst touch=e.touches[0];const x=(touch.clientX-rect.left)*scaleX;const y=(touch.clientY-rect.top)*scaleY;drawBlock(x,y);};const handleTouchEnd=()=>{stopDrawing();};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Draw a Digit\"}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:canvasSize,height:canvasSize,style:{border:'1px solid black',width:'90vw',// Responsive width for mobile\nmaxWidth:\"\".concat(canvasSize,\"px\"),// Limit maximum width\nheight:'auto'// Maintain aspect ratio\n},onMouseDown:handleMouseDown,onMouseMove:handleMouseMove,onMouseUp:handleMouseUp,onMouseLeave:handleMouseUp// Stop drawing if the mouse leaves the canvas\n,onTouchStart:handleTouchStart,onTouchMove:handleTouchMove,onTouchEnd:handleTouchEnd}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:predictDigit,style:{padding:'10px 20px',fontSize:'16px',margin:'10px',cursor:'pointer'},children:\"Predict\"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearCanvas,style:{padding:'10px 20px',fontSize:'16px',margin:'10px',cursor:'pointer'},children:\"Clear\"})]}),prediction!==null&&/*#__PURE__*/_jsxs(\"h2\",{children:[\"Predicted Digit: \",prediction]}),Array.isArray(probabilities)&&probabilities.length>0&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Prediction Probabilities\"}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',gap:'5px',flexWrap:'wrap'},children:probabilities.map((prob,index)=>/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',margin:'5px'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'20px',// Adjust width for smaller screens\nheight:\"\".concat(prob*100,\"%\"),backgroundColor:'blue',margin:'0 auto'}}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:'12px'},children:index})]},index))})]})]});}export default App;","map":{"version":3,"names":["React","useRef","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","App","canvasRef","prediction","setPrediction","probabilities","setProbabilities","gridSize","canvasSize","blockSize","isDrawing","clearCanvas","canvas","current","ctx","getContext","fillStyle","fillRect","width","height","preventTouchScroll","e","preventDefault","addEventListener","passive","removeEventListener","predictDigit","imageData","getImageData","grayscaleData","i","data","length","grayscale","normalized","push","resizedData","scale","y","x","startX","Math","floor","startY","endX","endY","sum","count","yy","xx","pixelIndex","response","post","image","console","log","digit","error","startDrawing","drawBlock","gridX","gridY","stopDrawing","handleMouseDown","rect","getBoundingClientRect","scaleX","scaleY","clientX","left","clientY","top","handleMouseMove","handleMouseUp","handleTouchStart","touch","touches","handleTouchMove","handleTouchEnd","style","textAlign","children","ref","border","maxWidth","concat","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","onClick","padding","fontSize","margin","cursor","Array","isArray","marginTop","display","justifyContent","gap","flexWrap","map","prob","index","backgroundColor"],"sources":["/home/aidan/busbylabs/public_html/projects/MNISTneuralnet/src/App.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [prediction, setPrediction] = useState(null);\n  const [probabilities, setProbabilities] = useState([]); // Store probabilities for each digit\n\n  const gridSize = 28; // The grid is 28x28\n  const canvasSize = 560; // The canvas is 560x560\n  const blockSize = canvasSize / gridSize; // Size of each block in the grid\n  let isDrawing = false; // Track whether the user is drawing\n\n  // Function to clear the canvas\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white'; // Set the canvas background to white\n    ctx.fillRect(0, 0, canvas.width, canvas.height); // Fill the canvas with white\n  };\n\n  // Clear the canvas on initial load\n  useEffect(() => {\n    clearCanvas();\n\n    // Prevent touch scrolling on the canvas\n    const canvas = canvasRef.current;\n\n    const preventTouchScroll = (e) => {\n      e.preventDefault();\n    };\n\n    canvas.addEventListener('touchmove', preventTouchScroll, { passive: false });\n    canvas.addEventListener('touchstart', preventTouchScroll, { passive: false });\n\n    return () => {\n      canvas.removeEventListener('touchmove', preventTouchScroll);\n      canvas.removeEventListener('touchstart', preventTouchScroll);\n    };\n  }, []);\n\n  // Function to send the canvas data to the backend\n  const predictDigit = async () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Get the image data from the canvas\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const grayscaleData = [];\n\n    // Convert the canvas data to grayscale and normalize\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      const grayscale = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n      const normalized = 1 - grayscale / 255; // Invert so 0 is white and 1 is black\n      grayscaleData.push(normalized);\n    }\n\n    const resizedData = [];\n    const scale = canvas.width / gridSize;\n    for (let y = 0; y < gridSize; y++) {\n      for (let x = 0; x < gridSize; x++) {\n        const startX = Math.floor(x * scale);\n        const startY = Math.floor(y * scale);\n        const endX = Math.floor((x + 1) * scale);\n        const endY = Math.floor((y + 1) * scale);\n\n        let sum = 0;\n        let count = 0;\n        for (let yy = startY; yy < endY; yy++) {\n          for (let xx = startX; xx < endX; xx++) {\n            const pixelIndex = yy * canvas.width + xx;\n            sum += grayscaleData[pixelIndex];\n            count++;\n          }\n        }\n        resizedData.push(sum / count);\n      }\n    }\n\n    try {\n      const response = await axios.post('https://busbylabs.com/projects/MNISTneuralnet/predict', {\n        image: resizedData,\n      });\n\n      console.log(\"Backend Response:\", response.data); // Debugging\n\n      setPrediction(response.data.digit);\n      setProbabilities(response.data.probabilities || []); // Handle missing probabilities\n    } catch (error) {\n      console.error('Error predicting digit:', error);\n    }\n  };\n\n  // Function to start drawing\n  const startDrawing = (x, y) => {\n    isDrawing = true;\n    drawBlock(x, y); // Start drawing immediately\n  };\n\n  // Function to draw a block on the canvas\n  const drawBlock = (x, y) => {\n    if (!isDrawing) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Calculate the grid cell (block) based on the current position\n    const gridX = Math.floor(x / blockSize) * blockSize;\n    const gridY = Math.floor(y / blockSize) * blockSize;\n\n    // Draw a filled rectangle (block) at the grid cell\n    ctx.fillStyle = 'black';\n    ctx.fillRect(gridX, gridY, blockSize, blockSize);\n  };\n\n  // Function to stop drawing\n  const stopDrawing = () => {\n    isDrawing = false;\n  };\n\n  // Function to handle mouse events\n  const handleMouseDown = (e) => {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const scaleX = canvasRef.current.width / rect.width; // Account for scaling\n    const scaleY = canvasRef.current.height / rect.height; // Account for scaling\n    const x = (e.clientX - rect.left) * scaleX;\n    const y = (e.clientY - rect.top) * scaleY;\n    startDrawing(x, y);\n  };\n\n  const handleMouseMove = (e) => {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const scaleX = canvasRef.current.width / rect.width; // Account for scaling\n    const scaleY = canvasRef.current.height / rect.height; // Account for scaling\n    const x = (e.clientX - rect.left) * scaleX;\n    const y = (e.clientY - rect.top) * scaleY;\n    drawBlock(x, y);\n  };\n\n  const handleMouseUp = () => {\n    stopDrawing();\n  };\n\n  // Function to handle touch events\n  const handleTouchStart = (e) => {\n    e.preventDefault();\n    const rect = canvasRef.current.getBoundingClientRect();\n    const scaleX = canvasRef.current.width / rect.width; // Account for scaling\n    const scaleY = canvasRef.current.height / rect.height; // Account for scaling\n    const touch = e.touches[0];\n    const x = (touch.clientX - rect.left) * scaleX;\n    const y = (touch.clientY - rect.top) * scaleY;\n    startDrawing(x, y);\n  };\n\n  const handleTouchMove = (e) => {\n    e.preventDefault();\n    const rect = canvasRef.current.getBoundingClientRect();\n    const scaleX = canvasRef.current.width / rect.width; // Account for scaling\n    const scaleY = canvasRef.current.height / rect.height; // Account for scaling\n    const touch = e.touches[0];\n    const x = (touch.clientX - rect.left) * scaleX;\n    const y = (touch.clientY - rect.top) * scaleY;\n    drawBlock(x, y);\n  };\n\n  const handleTouchEnd = () => {\n    stopDrawing();\n  };\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h1>Draw a Digit</h1>\n      <canvas\n        ref={canvasRef}\n        width={canvasSize}\n        height={canvasSize}\n        style={{\n          border: '1px solid black',\n          width: '90vw', // Responsive width for mobile\n          maxWidth: `${canvasSize}px`, // Limit maximum width\n          height: 'auto', // Maintain aspect ratio\n        }}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp} // Stop drawing if the mouse leaves the canvas\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      />\n      <div>\n        <button\n          onClick={predictDigit}\n          style={{\n            padding: '10px 20px',\n            fontSize: '16px',\n            margin: '10px',\n            cursor: 'pointer',\n          }}\n        >\n          Predict\n        </button>\n        <button\n          onClick={clearCanvas}\n          style={{\n            padding: '10px 20px',\n            fontSize: '16px',\n            margin: '10px',\n            cursor: 'pointer',\n          }}\n        >\n          Clear\n        </button>\n      </div>\n      {prediction !== null && <h2>Predicted Digit: {prediction}</h2>}\n\n      {Array.isArray(probabilities) && probabilities.length > 0 && (\n        <div style={{ marginTop: '20px' }}>\n          <h3>Prediction Probabilities</h3>\n          <div style={{ display: 'flex', justifyContent: 'center', gap: '5px', flexWrap: 'wrap' }}>\n            {probabilities.map((prob, index) => (\n              <div key={index} style={{ textAlign: 'center', margin: '5px' }}>\n                <div\n                  style={{\n                    width: '20px', // Adjust width for smaller screens\n                    height: `${prob * 100}%`,\n                    backgroundColor: 'blue',\n                    margin: '0 auto',\n                  }}\n                ></div>\n                <span style={{ fontSize: '12px' }}>{index}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,MAAM,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC1D,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAAAC,SAAS,CAAGT,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAACU,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAClD,KAAM,CAACW,aAAa,CAAEC,gBAAgB,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAE;AAExD,KAAM,CAAAa,QAAQ,CAAG,EAAE,CAAE;AACrB,KAAM,CAAAC,UAAU,CAAG,GAAG,CAAE;AACxB,KAAM,CAAAC,SAAS,CAAGD,UAAU,CAAGD,QAAQ,CAAE;AACzC,GAAI,CAAAG,SAAS,CAAG,KAAK,CAAE;AAEvB;AACA,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACxB,KAAM,CAAAC,MAAM,CAAGV,SAAS,CAACW,OAAO,CAChC,KAAM,CAAAC,GAAG,CAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CACnCD,GAAG,CAACE,SAAS,CAAG,OAAO,CAAE;AACzBF,GAAG,CAACG,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAEL,MAAM,CAACM,KAAK,CAAEN,MAAM,CAACO,MAAM,CAAC,CAAE;AACnD,CAAC,CAED;AACAxB,SAAS,CAAC,IAAM,CACdgB,WAAW,CAAC,CAAC,CAEb;AACA,KAAM,CAAAC,MAAM,CAAGV,SAAS,CAACW,OAAO,CAEhC,KAAM,CAAAO,kBAAkB,CAAIC,CAAC,EAAK,CAChCA,CAAC,CAACC,cAAc,CAAC,CAAC,CACpB,CAAC,CAEDV,MAAM,CAACW,gBAAgB,CAAC,WAAW,CAAEH,kBAAkB,CAAE,CAAEI,OAAO,CAAE,KAAM,CAAC,CAAC,CAC5EZ,MAAM,CAACW,gBAAgB,CAAC,YAAY,CAAEH,kBAAkB,CAAE,CAAEI,OAAO,CAAE,KAAM,CAAC,CAAC,CAE7E,MAAO,IAAM,CACXZ,MAAM,CAACa,mBAAmB,CAAC,WAAW,CAAEL,kBAAkB,CAAC,CAC3DR,MAAM,CAACa,mBAAmB,CAAC,YAAY,CAAEL,kBAAkB,CAAC,CAC9D,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAM,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,KAAM,CAAAd,MAAM,CAAGV,SAAS,CAACW,OAAO,CAChC,KAAM,CAAAC,GAAG,CAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CAEnC;AACA,KAAM,CAAAY,SAAS,CAAGb,GAAG,CAACc,YAAY,CAAC,CAAC,CAAE,CAAC,CAAEhB,MAAM,CAACM,KAAK,CAAEN,MAAM,CAACO,MAAM,CAAC,CACrE,KAAM,CAAAU,aAAa,CAAG,EAAE,CAExB;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,SAAS,CAACI,IAAI,CAACC,MAAM,CAAEF,CAAC,EAAI,CAAC,CAAE,CACjD,KAAM,CAAAG,SAAS,CAAG,CAACN,SAAS,CAACI,IAAI,CAACD,CAAC,CAAC,CAAGH,SAAS,CAACI,IAAI,CAACD,CAAC,CAAG,CAAC,CAAC,CAAGH,SAAS,CAACI,IAAI,CAACD,CAAC,CAAG,CAAC,CAAC,EAAI,CAAC,CACzF,KAAM,CAAAI,UAAU,CAAG,CAAC,CAAGD,SAAS,CAAG,GAAG,CAAE;AACxCJ,aAAa,CAACM,IAAI,CAACD,UAAU,CAAC,CAChC,CAEA,KAAM,CAAAE,WAAW,CAAG,EAAE,CACtB,KAAM,CAAAC,KAAK,CAAGzB,MAAM,CAACM,KAAK,CAAGX,QAAQ,CACrC,IAAK,GAAI,CAAA+B,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG/B,QAAQ,CAAE+B,CAAC,EAAE,CAAE,CACjC,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGhC,QAAQ,CAAEgC,CAAC,EAAE,CAAE,CACjC,KAAM,CAAAC,MAAM,CAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAAGF,KAAK,CAAC,CACpC,KAAM,CAAAM,MAAM,CAAGF,IAAI,CAACC,KAAK,CAACJ,CAAC,CAAGD,KAAK,CAAC,CACpC,KAAM,CAAAO,IAAI,CAAGH,IAAI,CAACC,KAAK,CAAC,CAACH,CAAC,CAAG,CAAC,EAAIF,KAAK,CAAC,CACxC,KAAM,CAAAQ,IAAI,CAAGJ,IAAI,CAACC,KAAK,CAAC,CAACJ,CAAC,CAAG,CAAC,EAAID,KAAK,CAAC,CAExC,GAAI,CAAAS,GAAG,CAAG,CAAC,CACX,GAAI,CAAAC,KAAK,CAAG,CAAC,CACb,IAAK,GAAI,CAAAC,EAAE,CAAGL,MAAM,CAAEK,EAAE,CAAGH,IAAI,CAAEG,EAAE,EAAE,CAAE,CACrC,IAAK,GAAI,CAAAC,EAAE,CAAGT,MAAM,CAAES,EAAE,CAAGL,IAAI,CAAEK,EAAE,EAAE,CAAE,CACrC,KAAM,CAAAC,UAAU,CAAGF,EAAE,CAAGpC,MAAM,CAACM,KAAK,CAAG+B,EAAE,CACzCH,GAAG,EAAIjB,aAAa,CAACqB,UAAU,CAAC,CAChCH,KAAK,EAAE,CACT,CACF,CACAX,WAAW,CAACD,IAAI,CAACW,GAAG,CAAGC,KAAK,CAAC,CAC/B,CACF,CAEA,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAvD,KAAK,CAACwD,IAAI,CAAC,uDAAuD,CAAE,CACzFC,KAAK,CAAEjB,WACT,CAAC,CAAC,CAEFkB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEJ,QAAQ,CAACpB,IAAI,CAAC,CAAE;AAEjD3B,aAAa,CAAC+C,QAAQ,CAACpB,IAAI,CAACyB,KAAK,CAAC,CAClClD,gBAAgB,CAAC6C,QAAQ,CAACpB,IAAI,CAAC1B,aAAa,EAAI,EAAE,CAAC,CAAE;AACvD,CAAE,MAAOoD,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACjD,CACF,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAGA,CAACnB,CAAC,CAAED,CAAC,GAAK,CAC7B5B,SAAS,CAAG,IAAI,CAChBiD,SAAS,CAACpB,CAAC,CAAED,CAAC,CAAC,CAAE;AACnB,CAAC,CAED;AACA,KAAM,CAAAqB,SAAS,CAAGA,CAACpB,CAAC,CAAED,CAAC,GAAK,CAC1B,GAAI,CAAC5B,SAAS,CAAE,OAEhB,KAAM,CAAAE,MAAM,CAAGV,SAAS,CAACW,OAAO,CAChC,KAAM,CAAAC,GAAG,CAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CAEnC;AACA,KAAM,CAAA6C,KAAK,CAAGnB,IAAI,CAACC,KAAK,CAACH,CAAC,CAAG9B,SAAS,CAAC,CAAGA,SAAS,CACnD,KAAM,CAAAoD,KAAK,CAAGpB,IAAI,CAACC,KAAK,CAACJ,CAAC,CAAG7B,SAAS,CAAC,CAAGA,SAAS,CAEnD;AACAK,GAAG,CAACE,SAAS,CAAG,OAAO,CACvBF,GAAG,CAACG,QAAQ,CAAC2C,KAAK,CAAEC,KAAK,CAAEpD,SAAS,CAAEA,SAAS,CAAC,CAClD,CAAC,CAED;AACA,KAAM,CAAAqD,WAAW,CAAGA,CAAA,GAAM,CACxBpD,SAAS,CAAG,KAAK,CACnB,CAAC,CAED;AACA,KAAM,CAAAqD,eAAe,CAAI1C,CAAC,EAAK,CAC7B,KAAM,CAAA2C,IAAI,CAAG9D,SAAS,CAACW,OAAO,CAACoD,qBAAqB,CAAC,CAAC,CACtD,KAAM,CAAAC,MAAM,CAAGhE,SAAS,CAACW,OAAO,CAACK,KAAK,CAAG8C,IAAI,CAAC9C,KAAK,CAAE;AACrD,KAAM,CAAAiD,MAAM,CAAGjE,SAAS,CAACW,OAAO,CAACM,MAAM,CAAG6C,IAAI,CAAC7C,MAAM,CAAE;AACvD,KAAM,CAAAoB,CAAC,CAAG,CAAClB,CAAC,CAAC+C,OAAO,CAAGJ,IAAI,CAACK,IAAI,EAAIH,MAAM,CAC1C,KAAM,CAAA5B,CAAC,CAAG,CAACjB,CAAC,CAACiD,OAAO,CAAGN,IAAI,CAACO,GAAG,EAAIJ,MAAM,CACzCT,YAAY,CAACnB,CAAC,CAAED,CAAC,CAAC,CACpB,CAAC,CAED,KAAM,CAAAkC,eAAe,CAAInD,CAAC,EAAK,CAC7B,KAAM,CAAA2C,IAAI,CAAG9D,SAAS,CAACW,OAAO,CAACoD,qBAAqB,CAAC,CAAC,CACtD,KAAM,CAAAC,MAAM,CAAGhE,SAAS,CAACW,OAAO,CAACK,KAAK,CAAG8C,IAAI,CAAC9C,KAAK,CAAE;AACrD,KAAM,CAAAiD,MAAM,CAAGjE,SAAS,CAACW,OAAO,CAACM,MAAM,CAAG6C,IAAI,CAAC7C,MAAM,CAAE;AACvD,KAAM,CAAAoB,CAAC,CAAG,CAAClB,CAAC,CAAC+C,OAAO,CAAGJ,IAAI,CAACK,IAAI,EAAIH,MAAM,CAC1C,KAAM,CAAA5B,CAAC,CAAG,CAACjB,CAAC,CAACiD,OAAO,CAAGN,IAAI,CAACO,GAAG,EAAIJ,MAAM,CACzCR,SAAS,CAACpB,CAAC,CAAED,CAAC,CAAC,CACjB,CAAC,CAED,KAAM,CAAAmC,aAAa,CAAGA,CAAA,GAAM,CAC1BX,WAAW,CAAC,CAAC,CACf,CAAC,CAED;AACA,KAAM,CAAAY,gBAAgB,CAAIrD,CAAC,EAAK,CAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,KAAM,CAAA0C,IAAI,CAAG9D,SAAS,CAACW,OAAO,CAACoD,qBAAqB,CAAC,CAAC,CACtD,KAAM,CAAAC,MAAM,CAAGhE,SAAS,CAACW,OAAO,CAACK,KAAK,CAAG8C,IAAI,CAAC9C,KAAK,CAAE;AACrD,KAAM,CAAAiD,MAAM,CAAGjE,SAAS,CAACW,OAAO,CAACM,MAAM,CAAG6C,IAAI,CAAC7C,MAAM,CAAE;AACvD,KAAM,CAAAwD,KAAK,CAAGtD,CAAC,CAACuD,OAAO,CAAC,CAAC,CAAC,CAC1B,KAAM,CAAArC,CAAC,CAAG,CAACoC,KAAK,CAACP,OAAO,CAAGJ,IAAI,CAACK,IAAI,EAAIH,MAAM,CAC9C,KAAM,CAAA5B,CAAC,CAAG,CAACqC,KAAK,CAACL,OAAO,CAAGN,IAAI,CAACO,GAAG,EAAIJ,MAAM,CAC7CT,YAAY,CAACnB,CAAC,CAAED,CAAC,CAAC,CACpB,CAAC,CAED,KAAM,CAAAuC,eAAe,CAAIxD,CAAC,EAAK,CAC7BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,KAAM,CAAA0C,IAAI,CAAG9D,SAAS,CAACW,OAAO,CAACoD,qBAAqB,CAAC,CAAC,CACtD,KAAM,CAAAC,MAAM,CAAGhE,SAAS,CAACW,OAAO,CAACK,KAAK,CAAG8C,IAAI,CAAC9C,KAAK,CAAE;AACrD,KAAM,CAAAiD,MAAM,CAAGjE,SAAS,CAACW,OAAO,CAACM,MAAM,CAAG6C,IAAI,CAAC7C,MAAM,CAAE;AACvD,KAAM,CAAAwD,KAAK,CAAGtD,CAAC,CAACuD,OAAO,CAAC,CAAC,CAAC,CAC1B,KAAM,CAAArC,CAAC,CAAG,CAACoC,KAAK,CAACP,OAAO,CAAGJ,IAAI,CAACK,IAAI,EAAIH,MAAM,CAC9C,KAAM,CAAA5B,CAAC,CAAG,CAACqC,KAAK,CAACL,OAAO,CAAGN,IAAI,CAACO,GAAG,EAAIJ,MAAM,CAC7CR,SAAS,CAACpB,CAAC,CAAED,CAAC,CAAC,CACjB,CAAC,CAED,KAAM,CAAAwC,cAAc,CAAGA,CAAA,GAAM,CAC3BhB,WAAW,CAAC,CAAC,CACf,CAAC,CAED,mBACE9D,KAAA,QAAK+E,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAC,QAAA,eAClCnF,IAAA,OAAAmF,QAAA,CAAI,cAAY,CAAI,CAAC,cACrBnF,IAAA,WACEoF,GAAG,CAAEhF,SAAU,CACfgB,KAAK,CAAEV,UAAW,CAClBW,MAAM,CAAEX,UAAW,CACnBuE,KAAK,CAAE,CACLI,MAAM,CAAE,iBAAiB,CACzBjE,KAAK,CAAE,MAAM,CAAE;AACfkE,QAAQ,IAAAC,MAAA,CAAK7E,UAAU,MAAI,CAAE;AAC7BW,MAAM,CAAE,MAAQ;AAClB,CAAE,CACFmE,WAAW,CAAEvB,eAAgB,CAC7BwB,WAAW,CAAEf,eAAgB,CAC7BgB,SAAS,CAAEf,aAAc,CACzBgB,YAAY,CAAEhB,aAAe;AAAA,CAC7BiB,YAAY,CAAEhB,gBAAiB,CAC/BiB,WAAW,CAAEd,eAAgB,CAC7Be,UAAU,CAAEd,cAAe,CAC5B,CAAC,cACF9E,KAAA,QAAAiF,QAAA,eACEnF,IAAA,WACE+F,OAAO,CAAEnE,YAAa,CACtBqD,KAAK,CAAE,CACLe,OAAO,CAAE,WAAW,CACpBC,QAAQ,CAAE,MAAM,CAChBC,MAAM,CAAE,MAAM,CACdC,MAAM,CAAE,SACV,CAAE,CAAAhB,QAAA,CACH,SAED,CAAQ,CAAC,cACTnF,IAAA,WACE+F,OAAO,CAAElF,WAAY,CACrBoE,KAAK,CAAE,CACLe,OAAO,CAAE,WAAW,CACpBC,QAAQ,CAAE,MAAM,CAChBC,MAAM,CAAE,MAAM,CACdC,MAAM,CAAE,SACV,CAAE,CAAAhB,QAAA,CACH,OAED,CAAQ,CAAC,EACN,CAAC,CACL9E,UAAU,GAAK,IAAI,eAAIH,KAAA,OAAAiF,QAAA,EAAI,mBAAiB,CAAC9E,UAAU,EAAK,CAAC,CAE7D+F,KAAK,CAACC,OAAO,CAAC9F,aAAa,CAAC,EAAIA,aAAa,CAAC2B,MAAM,CAAG,CAAC,eACvDhC,KAAA,QAAK+E,KAAK,CAAE,CAAEqB,SAAS,CAAE,MAAO,CAAE,CAAAnB,QAAA,eAChCnF,IAAA,OAAAmF,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjCnF,IAAA,QAAKiF,KAAK,CAAE,CAAEsB,OAAO,CAAE,MAAM,CAAEC,cAAc,CAAE,QAAQ,CAAEC,GAAG,CAAE,KAAK,CAAEC,QAAQ,CAAE,MAAO,CAAE,CAAAvB,QAAA,CACrF5E,aAAa,CAACoG,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,gBAC7B3G,KAAA,QAAiB+E,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAQ,CAAEgB,MAAM,CAAE,KAAM,CAAE,CAAAf,QAAA,eAC7DnF,IAAA,QACEiF,KAAK,CAAE,CACL7D,KAAK,CAAE,MAAM,CAAE;AACfC,MAAM,IAAAkE,MAAA,CAAKqB,IAAI,CAAG,GAAG,KAAG,CACxBE,eAAe,CAAE,MAAM,CACvBZ,MAAM,CAAE,QACV,CAAE,CACE,CAAC,cACPlG,IAAA,SAAMiF,KAAK,CAAE,CAAEgB,QAAQ,CAAE,MAAO,CAAE,CAAAd,QAAA,CAAE0B,KAAK,CAAO,CAAC,GATzCA,KAUL,CACN,CAAC,CACC,CAAC,EACH,CACN,EACE,CAAC,CAEV,CAEA,cAAe,CAAA1G,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}