{"ast":null,"code":"import React,{useRef,useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const canvasRef=useRef(null);const[prediction,setPrediction]=useState(null);const[probabilities,setProbabilities]=useState([]);// Store probabilities for each digit\nconst blockSize=20;// Fixed block size\nconst brushSize=2*blockSize;// Brush size is 2x the block size\n// Function to clear the canvas\nconst clearCanvas=()=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');ctx.fillStyle='white';// Set the canvas background to white\nctx.fillRect(0,0,canvas.width,canvas.height);// Fill the canvas with white\n};// Clear the canvas on initial load\nuseEffect(()=>{clearCanvas();},[]);// Function to send the canvas data to the backend\nconst predictDigit=async()=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');// Get the image data from the canvas\nconst imageData=ctx.getImageData(0,0,canvas.width,canvas.height);const grayscaleData=[];// Convert the canvas data to grayscale and normalize\nfor(let i=0;i<imageData.data.length;i+=4){const grayscale=(imageData.data[i]+imageData.data[i+1]+imageData.data[i+2])/3;const normalized=1-grayscale/255;// Invert so 0 is white and 1 is black\ngrayscaleData.push(normalized);}const resizedData=[];const scale=canvas.width/28;for(let y=0;y<28;y++){for(let x=0;x<28;x++){const startX=Math.floor(x*scale);const startY=Math.floor(y*scale);const endX=Math.floor((x+1)*scale);const endY=Math.floor((y+1)*scale);let sum=0;let count=0;for(let yy=startY;yy<endY;yy++){for(let xx=startX;xx<endX;xx++){const pixelIndex=yy*canvas.width+xx;sum+=grayscaleData[pixelIndex];count++;}}resizedData.push(sum/count);}}try{const response=await axios.post('https://busbylabs.com/projects/MNISTneuralnet/predict',{image:resizedData});console.log(\"Backend Response:\",response.data);// Debugging\nsetPrediction(response.data.digit);setProbabilities(response.data.probabilities||[]);// Handle missing probabilities\n}catch(error){console.error('Error predicting digit:',error);}};const drawBlock=e=>{const canvas=canvasRef.current;const ctx=canvas.getContext('2d');const rect=canvas.getBoundingClientRect();const x=e.clientX-rect.left;const y=e.clientY-rect.top;const x1=Math.floor(x/blockSize)*blockSize;const y1=Math.floor(y/blockSize)*blockSize;const x2=x1+brushSize;const y2=y1+brushSize;ctx.fillStyle='black';ctx.fillRect(x1,y1,x2-x1,y2-y1);};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Draw a Digit\"}),/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:560,height:560,style:{border:'1px solid black'},onMouseMove:e=>{if(e.buttons!==1)return;drawBlock(e);},onMouseDown:e=>drawBlock(e)}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:predictDigit,children:\"Predict\"}),/*#__PURE__*/_jsx(\"button\",{onClick:clearCanvas,children:\"Clear\"})]}),prediction!==null&&/*#__PURE__*/_jsxs(\"h2\",{children:[\"Predicted Digit: \",prediction]}),Array.isArray(probabilities)&&probabilities.length>0&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px'},children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Prediction Probabilities\"}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',gap:'10px'},children:probabilities.map((prob,index)=>/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'30px',height:\"\".concat(prob*100,\"%\"),backgroundColor:'blue',margin:'0 auto'}}),/*#__PURE__*/_jsx(\"span\",{children:index})]},index))})]})]});}export default App;","map":{"version":3,"names":["React","useRef","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","App","canvasRef","prediction","setPrediction","probabilities","setProbabilities","blockSize","brushSize","clearCanvas","canvas","current","ctx","getContext","fillStyle","fillRect","width","height","predictDigit","imageData","getImageData","grayscaleData","i","data","length","grayscale","normalized","push","resizedData","scale","y","x","startX","Math","floor","startY","endX","endY","sum","count","yy","xx","pixelIndex","response","post","image","console","log","digit","error","drawBlock","e","rect","getBoundingClientRect","clientX","left","clientY","top","x1","y1","x2","y2","style","textAlign","children","ref","border","onMouseMove","buttons","onMouseDown","onClick","Array","isArray","marginTop","display","justifyContent","gap","map","prob","index","concat","backgroundColor","margin"],"sources":["/home/aidan/busbylabs/public_html/projects/MNISTneuralnet/src/App.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const canvasRef = useRef(null);\n  const [prediction, setPrediction] = useState(null);\n  const [probabilities, setProbabilities] = useState([]); // Store probabilities for each digit\n\n  const blockSize = 20; // Fixed block size\n  const brushSize = 2 * blockSize; // Brush size is 2x the block size\n\n  // Function to clear the canvas\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white'; // Set the canvas background to white\n    ctx.fillRect(0, 0, canvas.width, canvas.height); // Fill the canvas with white\n  };\n\n  // Clear the canvas on initial load\n  useEffect(() => {\n    clearCanvas();\n  }, []);\n\n  // Function to send the canvas data to the backend\n  const predictDigit = async () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Get the image data from the canvas\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const grayscaleData = [];\n\n    // Convert the canvas data to grayscale and normalize\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      const grayscale = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2]) / 3;\n      const normalized = 1 - grayscale / 255; // Invert so 0 is white and 1 is black\n      grayscaleData.push(normalized);\n    }\n\n    const resizedData = [];\n    const scale = canvas.width / 28;\n    for (let y = 0; y < 28; y++) {\n      for (let x = 0; x < 28; x++) {\n        const startX = Math.floor(x * scale);\n        const startY = Math.floor(y * scale);\n        const endX = Math.floor((x + 1) * scale);\n        const endY = Math.floor((y + 1) * scale);\n\n        let sum = 0;\n        let count = 0;\n        for (let yy = startY; yy < endY; yy++) {\n          for (let xx = startX; xx < endX; xx++) {\n            const pixelIndex = yy * canvas.width + xx;\n            sum += grayscaleData[pixelIndex];\n            count++;\n          }\n        }\n        resizedData.push(sum / count);\n      }\n    }\n\n    try {\n      const response = await axios.post('https://busbylabs.com/projects/MNISTneuralnet/predict', {\n        image: resizedData,\n      });\n\n      console.log(\"Backend Response:\", response.data); // Debugging\n\n      setPrediction(response.data.digit);\n      setProbabilities(response.data.probabilities || []); // Handle missing probabilities\n    } catch (error) {\n      console.error('Error predicting digit:', error);\n    }\n  };\n\n  const drawBlock = (e) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    const x1 = Math.floor(x / blockSize) * blockSize;\n    const y1 = Math.floor(y / blockSize) * blockSize;\n\n    const x2 = x1 + brushSize;\n    const y2 = y1 + brushSize;\n\n    ctx.fillStyle = 'black';\n    ctx.fillRect(x1, y1, x2 - x1, y2 - y1);\n  };\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h1>Draw a Digit</h1>\n      <canvas\n        ref={canvasRef}\n        width={560}\n        height={560}\n        style={{ border: '1px solid black' }}\n        onMouseMove={(e) => {\n          if (e.buttons !== 1) return;\n          drawBlock(e);\n        }}\n        onMouseDown={(e) => drawBlock(e)}\n      />\n      <div>\n        <button onClick={predictDigit}>Predict</button>\n        <button onClick={clearCanvas}>Clear</button>\n      </div>\n      {prediction !== null && <h2>Predicted Digit: {prediction}</h2>}\n\n      {Array.isArray(probabilities) && probabilities.length > 0 && (\n        <div style={{ marginTop: '20px' }}>\n          <h3>Prediction Probabilities</h3>\n          <div style={{ display: 'flex', justifyContent: 'center', gap: '10px' }}>\n            {probabilities.map((prob, index) => (\n              <div key={index} style={{ textAlign: 'center' }}>\n                <div\n                  style={{\n                    width: '30px',\n                    height: `${prob * 100}%`,\n                    backgroundColor: 'blue',\n                    margin: '0 auto',\n                  }}\n                ></div>\n                <span>{index}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,MAAM,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC1D,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAAAC,SAAS,CAAGT,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAACU,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAClD,KAAM,CAACW,aAAa,CAAEC,gBAAgB,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAE;AAExD,KAAM,CAAAa,SAAS,CAAG,EAAE,CAAE;AACtB,KAAM,CAAAC,SAAS,CAAG,CAAC,CAAGD,SAAS,CAAE;AAEjC;AACA,KAAM,CAAAE,WAAW,CAAGA,CAAA,GAAM,CACxB,KAAM,CAAAC,MAAM,CAAGR,SAAS,CAACS,OAAO,CAChC,KAAM,CAAAC,GAAG,CAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CACnCD,GAAG,CAACE,SAAS,CAAG,OAAO,CAAE;AACzBF,GAAG,CAACG,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAEL,MAAM,CAACM,KAAK,CAAEN,MAAM,CAACO,MAAM,CAAC,CAAE;AACnD,CAAC,CAED;AACAtB,SAAS,CAAC,IAAM,CACdc,WAAW,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAS,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,KAAM,CAAAR,MAAM,CAAGR,SAAS,CAACS,OAAO,CAChC,KAAM,CAAAC,GAAG,CAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CAEnC;AACA,KAAM,CAAAM,SAAS,CAAGP,GAAG,CAACQ,YAAY,CAAC,CAAC,CAAE,CAAC,CAAEV,MAAM,CAACM,KAAK,CAAEN,MAAM,CAACO,MAAM,CAAC,CACrE,KAAM,CAAAI,aAAa,CAAG,EAAE,CAExB;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,SAAS,CAACI,IAAI,CAACC,MAAM,CAAEF,CAAC,EAAI,CAAC,CAAE,CACjD,KAAM,CAAAG,SAAS,CAAG,CAACN,SAAS,CAACI,IAAI,CAACD,CAAC,CAAC,CAAGH,SAAS,CAACI,IAAI,CAACD,CAAC,CAAG,CAAC,CAAC,CAAGH,SAAS,CAACI,IAAI,CAACD,CAAC,CAAG,CAAC,CAAC,EAAI,CAAC,CACzF,KAAM,CAAAI,UAAU,CAAG,CAAC,CAAGD,SAAS,CAAG,GAAG,CAAE;AACxCJ,aAAa,CAACM,IAAI,CAACD,UAAU,CAAC,CAChC,CAEA,KAAM,CAAAE,WAAW,CAAG,EAAE,CACtB,KAAM,CAAAC,KAAK,CAAGnB,MAAM,CAACM,KAAK,CAAG,EAAE,CAC/B,IAAK,GAAI,CAAAc,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,EAAE,CAAEA,CAAC,EAAE,CAAE,CAC3B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,EAAE,CAAEA,CAAC,EAAE,CAAE,CAC3B,KAAM,CAAAC,MAAM,CAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAAGF,KAAK,CAAC,CACpC,KAAM,CAAAM,MAAM,CAAGF,IAAI,CAACC,KAAK,CAACJ,CAAC,CAAGD,KAAK,CAAC,CACpC,KAAM,CAAAO,IAAI,CAAGH,IAAI,CAACC,KAAK,CAAC,CAACH,CAAC,CAAG,CAAC,EAAIF,KAAK,CAAC,CACxC,KAAM,CAAAQ,IAAI,CAAGJ,IAAI,CAACC,KAAK,CAAC,CAACJ,CAAC,CAAG,CAAC,EAAID,KAAK,CAAC,CAExC,GAAI,CAAAS,GAAG,CAAG,CAAC,CACX,GAAI,CAAAC,KAAK,CAAG,CAAC,CACb,IAAK,GAAI,CAAAC,EAAE,CAAGL,MAAM,CAAEK,EAAE,CAAGH,IAAI,CAAEG,EAAE,EAAE,CAAE,CACrC,IAAK,GAAI,CAAAC,EAAE,CAAGT,MAAM,CAAES,EAAE,CAAGL,IAAI,CAAEK,EAAE,EAAE,CAAE,CACrC,KAAM,CAAAC,UAAU,CAAGF,EAAE,CAAG9B,MAAM,CAACM,KAAK,CAAGyB,EAAE,CACzCH,GAAG,EAAIjB,aAAa,CAACqB,UAAU,CAAC,CAChCH,KAAK,EAAE,CACT,CACF,CACAX,WAAW,CAACD,IAAI,CAACW,GAAG,CAAGC,KAAK,CAAC,CAC/B,CACF,CAEA,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAA/C,KAAK,CAACgD,IAAI,CAAC,uDAAuD,CAAE,CACzFC,KAAK,CAAEjB,WACT,CAAC,CAAC,CAEFkB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEJ,QAAQ,CAACpB,IAAI,CAAC,CAAE;AAEjDnB,aAAa,CAACuC,QAAQ,CAACpB,IAAI,CAACyB,KAAK,CAAC,CAClC1C,gBAAgB,CAACqC,QAAQ,CAACpB,IAAI,CAAClB,aAAa,EAAI,EAAE,CAAC,CAAE;AACvD,CAAE,MAAO4C,KAAK,CAAE,CACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CACjD,CACF,CAAC,CAED,KAAM,CAAAC,SAAS,CAAIC,CAAC,EAAK,CACvB,KAAM,CAAAzC,MAAM,CAAGR,SAAS,CAACS,OAAO,CAChC,KAAM,CAAAC,GAAG,CAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CACnC,KAAM,CAAAuC,IAAI,CAAG1C,MAAM,CAAC2C,qBAAqB,CAAC,CAAC,CAE3C,KAAM,CAAAtB,CAAC,CAAGoB,CAAC,CAACG,OAAO,CAAGF,IAAI,CAACG,IAAI,CAC/B,KAAM,CAAAzB,CAAC,CAAGqB,CAAC,CAACK,OAAO,CAAGJ,IAAI,CAACK,GAAG,CAE9B,KAAM,CAAAC,EAAE,CAAGzB,IAAI,CAACC,KAAK,CAACH,CAAC,CAAGxB,SAAS,CAAC,CAAGA,SAAS,CAChD,KAAM,CAAAoD,EAAE,CAAG1B,IAAI,CAACC,KAAK,CAACJ,CAAC,CAAGvB,SAAS,CAAC,CAAGA,SAAS,CAEhD,KAAM,CAAAqD,EAAE,CAAGF,EAAE,CAAGlD,SAAS,CACzB,KAAM,CAAAqD,EAAE,CAAGF,EAAE,CAAGnD,SAAS,CAEzBI,GAAG,CAACE,SAAS,CAAG,OAAO,CACvBF,GAAG,CAACG,QAAQ,CAAC2C,EAAE,CAAEC,EAAE,CAAEC,EAAE,CAAGF,EAAE,CAAEG,EAAE,CAAGF,EAAE,CAAC,CACxC,CAAC,CAED,mBACE3D,KAAA,QAAK8D,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAC,QAAA,eAClClE,IAAA,OAAAkE,QAAA,CAAI,cAAY,CAAI,CAAC,cACrBlE,IAAA,WACEmE,GAAG,CAAE/D,SAAU,CACfc,KAAK,CAAE,GAAI,CACXC,MAAM,CAAE,GAAI,CACZ6C,KAAK,CAAE,CAAEI,MAAM,CAAE,iBAAkB,CAAE,CACrCC,WAAW,CAAGhB,CAAC,EAAK,CAClB,GAAIA,CAAC,CAACiB,OAAO,GAAK,CAAC,CAAE,OACrBlB,SAAS,CAACC,CAAC,CAAC,CACd,CAAE,CACFkB,WAAW,CAAGlB,CAAC,EAAKD,SAAS,CAACC,CAAC,CAAE,CAClC,CAAC,cACFnD,KAAA,QAAAgE,QAAA,eACElE,IAAA,WAAQwE,OAAO,CAAEpD,YAAa,CAAA8C,QAAA,CAAC,SAAO,CAAQ,CAAC,cAC/ClE,IAAA,WAAQwE,OAAO,CAAE7D,WAAY,CAAAuD,QAAA,CAAC,OAAK,CAAQ,CAAC,EACzC,CAAC,CACL7D,UAAU,GAAK,IAAI,eAAIH,KAAA,OAAAgE,QAAA,EAAI,mBAAiB,CAAC7D,UAAU,EAAK,CAAC,CAE7DoE,KAAK,CAACC,OAAO,CAACnE,aAAa,CAAC,EAAIA,aAAa,CAACmB,MAAM,CAAG,CAAC,eACvDxB,KAAA,QAAK8D,KAAK,CAAE,CAAEW,SAAS,CAAE,MAAO,CAAE,CAAAT,QAAA,eAChClE,IAAA,OAAAkE,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjClE,IAAA,QAAKgE,KAAK,CAAE,CAAEY,OAAO,CAAE,MAAM,CAAEC,cAAc,CAAE,QAAQ,CAAEC,GAAG,CAAE,MAAO,CAAE,CAAAZ,QAAA,CACpE3D,aAAa,CAACwE,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,gBAC7B/E,KAAA,QAAiB8D,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAC,QAAA,eAC9ClE,IAAA,QACEgE,KAAK,CAAE,CACL9C,KAAK,CAAE,MAAM,CACbC,MAAM,IAAA+D,MAAA,CAAKF,IAAI,CAAG,GAAG,KAAG,CACxBG,eAAe,CAAE,MAAM,CACvBC,MAAM,CAAE,QACV,CAAE,CACE,CAAC,cACPpF,IAAA,SAAAkE,QAAA,CAAOe,KAAK,CAAO,CAAC,GATZA,KAUL,CACN,CAAC,CACC,CAAC,EACH,CACN,EACE,CAAC,CAEV,CAEA,cAAe,CAAA9E,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}